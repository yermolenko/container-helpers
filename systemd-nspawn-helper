#!/bin/bash
#
#  nspawn-helper - shell script template for automating systemd-nspawn
#  containers setup and usage
#
#  Copyright (C) 2017, 2018, 2019, 2021 Alexander Yermolenko
#  <yaa.mbox@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

machine_name="debian-9"
distro_codename="stretch"
distro_arch="amd64"
fakeuid="10100"
fakegid="10100"
fakename=user
fakeroot="/srv/nspawn/$machine_name"

autologin=1

x_isolation=1
x_isolation_display=40
x_isolation_display=$fakeuid
#xephyr_resolution=1920x1140
xephyr_resolution=1920x1000
#xephyr_resolution=1024x540
[[ "$(hostname)" = *nb ]] && xephyr_resolution=1000x578
extra_xephyr_options="-screen $xephyr_resolution"
#extra_xephyr_options="-screen $xephyr_resolution -no-host-grab"
x_real_display="${DISPLAY#:}"
#x_real_display=1

realuid="1000"
realgid="1000"
realname="yaa"
realhome="/home/yaa"
# where to bindfs fake home directory for easy access
realbind="$realhome/nspawn/$machine_name-$fakename"
fakehomebase="$fakeroot/home"
fakehome="$fakehomebase/$fakename"

pulse_server="unix:/run/user/$realuid/pulse/native"
#pulse_server="127.0.0.1"

pulse_server_is_socket=0
[ "${pulse_server:0:5}" == "unix:" ] && pulse_server_is_socket=1
pulse_server_socket=${pulse_server#unix:}

common_nspawn_options=""

personality="x86-64"
[ "$distro_arch" == "i386" ] && personality="x86"
[ "$distro_arch" == "x86" ] && personality="x86"
common_nspawn_options="$common_nspawn_options --personality=$personality"

die()
{
    msg=${1:-"Unknown Error"}
    echo "ERROR: $msg" 1>&2
    exit 1
}

goodbye()
{
    msg=${1:-"Cancelled by user"}
    echo "INFO: $msg" 1>&2
    exit 1
}

info()
{
    msg=${1:-"Info"}
    echo "INFO: $msg" 1>&2
}

require()
{
    local cmd=${1:?"Command name is required"}
    local extra_info=${2:+"\nNote: $2"}
    hash $cmd 2>/dev/null || die "$cmd not found$extra_info"
}

echo "machine_name=$machine_name"
echo "distro_codename=$distro_codename"
echo "distro_arch=$distro_arch"
echo "fakeuid=$fakeuid"
echo "fakegid=$fakegid"
echo "fakename=$fakename"
echo "fakeroot=$fakeroot"
echo "fakehomebase=$fakehomebase"
echo "fakehome=$fakehome"

echo "realuid=$realuid"
echo "realgid=$realgid"
echo "realhome=$realhome"
echo "realbind=$realbind"

echo "pulse_server_is_socket=$pulse_server_is_socket"
if [[ $pulse_server_is_socket -eq 1 ]]; then
    echo "pulse_server_socket=$pulse_server_socket"
    [ -e "$pulse_server_socket" ] \
        || echo "Warning: PulseAudio socket does not exist"
fi

echo "common_nspawn_options=$common_nspawn_options"

[ "$EUID" -eq 0 ] || die "Superuser privileges required"

require systemd-nspawn "apt-get install systemd-container"
require debootstrap "apt-get install debootstrap"
require runuser "apt-get install util-linux"
require Xephyr "apt-get install xserver-xephyr"
require xauth "apt-get install xauth"
require bindfs "apt-get install bindfs"

if [[ ! -e "$fakeroot" ]]; then
    mkdir -p "$fakeroot" || die "Cannot create $fakeroot"
    # Ordinary debootstrap call
    debootstrap --arch="$distro_arch" "$distro_codename" "$fakeroot" \
        || die "Installation to $fakeroot failed"
    # Custom debootstrap call example:
    # export DEBOOTSTRAP_DIR=/home/yaa/nspawn/tools/debootstrap
    # /home/yaa/nspawn/tools/debootstrap/debootstrap \
    #     --arch="$distro_arch" \
    #     --keyring=/home/yaa/nspawn/tools/keyrings/ubuntu-archive-keyring.gpg \
    #     --force-check-gpg \
    #     "$distro_codename" "$fakeroot" http://archive.ubuntu.com/ubuntu \
    #     || die "Installation to $fakeroot failed"
    systemd-nspawn $common_nspawn_options -D "$fakeroot" passwd \
        || die "Cannot set root password"
fi

if systemd-nspawn $common_nspawn_options -D "$fakeroot" id "$fakename" >/dev/null 2>&1; then
    echo "User \"$fakename\" exists"
else
    systemd-nspawn $common_nspawn_options -D "$fakeroot" \
                   groupadd --gid "$fakegid" \
                   "$fakename" \
        || die "Cannot create group"
    systemd-nspawn $common_nspawn_options -D "$fakeroot" \
                   useradd --uid "$fakeuid" -g "$fakename" \
                   -G video,audio --create-home \
                   "$fakename" \
        || die "Cannot create user"
    systemd-nspawn $common_nspawn_options -D "$fakeroot" \
                   chsh -s /bin/bash "$fakename"

    chmod 700 "$fakehome"
    # chown -R "$fakeuid:$fakegid" "$fakehome"
fi

[ -e "$fakehome" ] || die "$fakehome does not exist"
[ -e "$realhome" ] || die "$realhome does not exist"

[ -e "$realbind" ] || mkdir "$realbind"

if [ -z "$(ls -A "$realbind")" ]; then
    echo "Binding fake home directory within the real home"
    chown "$realuid:$realgid" "$realbind"
    bindfs --map="$fakeuid/$realuid:@$fakegid/@$realgid" \
           "$fakehome" "$realbind"
fi

extra_env=""

XAUTH_FILE="$fakehome/.Xauthority"
REAL_XAUTH_FILE="$realhome/.Xauthority"

if [[ $x_isolation -eq 0 ]]; then
    xauth -f "$REAL_XAUTH_FILE" extract - ":$x_real_display" | xauth -f "$XAUTH_FILE" merge -
    extra_env="$extra_env DISPLAY=:$x_real_display"
else
    [ -e /tmp/.X11-unix/X"$x_isolation_display" ] && die "Cannot setup Xephyr"

    COOKIE=`mcookie`
    [ -e "$XAUTH_FILE" ] && rm -f "$XAUTH_FILE"
    echo "add :$x_isolation_display . $COOKIE" | xauth -f "$XAUTH_FILE"

    runuser -c \
       "Xephyr :$x_isolation_display -auth \"$XAUTH_FILE\" \
           -title \"$fakename@$machine_name - nsvm\" -nolisten tcp \
           $extra_xephyr_options" \
       "$realname" 2>/dev/null &
    runuser_Xephyr_pid=$!

    sleep 3
    extra_env="$extra_env DISPLAY=:$x_isolation_display"
    extra_env="$extra_env QT_X11_NO_MITSHM=1"
fi

chown "$fakeuid:$fakegid" "$XAUTH_FILE"

extra_env="$extra_env LANG=ru_UA.UTF-8"

if [[ -e "$realhome/.config/pulse/cookie" ]]; then
    mkdir -p "$fakehome/.config/pulse" || die "Cannot create $fakehome/.config/pulse"
    cp "$realhome/.config/pulse/cookie" "$fakehome/.config/pulse/"
    chown -R "$fakeuid:$fakegid" "$fakehome/.config"
    chown -R "$fakeuid:$fakegid" "$fakehome/.config/pulse/"
    if [[ $pulse_server_is_socket -eq 1 ]]; then
        extra_env="$extra_env PULSE_SERVER=unix:/pulse_server/native"
    else
        extra_env="$extra_env PULSE_SERVER=\"$pulse_server\""
    fi
fi

echo "export $extra_env" > "$fakehome/.extra_env"
chown "$fakeuid:$fakegid" "$fakehome/.extra_env"
[ -e "$fakehome/.bash_profile" ] || cp -p "$fakehome/.extra_env" "$fakehome/.bash_profile"

if [[ $autologin -eq 1 ]]; then
    mkdir -p "$fakeroot/etc/systemd/system/console-getty.service.d" >/dev/null 2>&1
    echo -n "\
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noclear --autologin $fakename --keep-baud console 115200,38400,9600 \$TERM
" > "$fakeroot/etc/systemd/system/console-getty.service.d/override.conf"
fi

nspawn_cmd="-D $fakeroot --machine=$machine_name"

#[ -e /etc/machine-id ] && nspawn_cmd="$nspawn_cmd --bind=/etc/machine-id"
#[ -e /tmp/.X11-unix ] && nspawn_cmd="$nspawn_cmd --bind=/tmp/.X11-unix"
#[ -e /dev/shm ] && nspawn_cmd="$nspawn_cmd --bind=/dev/shm"
#[ -e /dev/snd ] && nspawn_cmd="$nspawn_cmd --bind=/dev/snd"
if [[ $pulse_server_is_socket -eq 1 ]]; then
    [ -e "$pulse_server_socket" ] && \
        nspawn_cmd="$nspawn_cmd --bind=$pulse_server_socket:/pulse_server/native"
fi
[ -e /dev/video ] && nspawn_cmd="$nspawn_cmd --bind=/dev/video"
[ -e /dev/video0 ] && nspawn_cmd="$nspawn_cmd --bind=/dev/video0"
[ -e /dev/video1 ] && nspawn_cmd="$nspawn_cmd --bind=/dev/video1"
[ -e /dev/video2 ] && nspawn_cmd="$nspawn_cmd --bind=/dev/video2"
if [[ $x_isolation -eq 0 ]]; then
    [ -e /dev/nvidia-modeset ] && nspawn_cmd="$nspawn_cmd --bind=/dev/nvidia-modeset"
    [ -e /dev/nvidia0 ] && nspawn_cmd="$nspawn_cmd --bind=/dev/nvidia0"
    [ -e /dev/nvidiactl ] && nspawn_cmd="$nspawn_cmd --bind=/dev/nvidiactl"
fi

nspawn_cmd="$nspawn_cmd --capability=CAP_IPC_LOCK"

#nspawn_cmd="$nspawn_cmd --property=CPUQuota=25%"

nspawn_cmd="$nspawn_cmd --boot"

echo "Excecuting systemd-nspawn $nspawn_cmd"
systemd-nspawn $common_nspawn_options $nspawn_cmd

rm -f "$XAUTH_FILE"

if [[ $x_isolation -eq 1 ]]; then
    # check process name before killing
    runuser_Xephyr_name=$( ps -p $runuser_Xephyr_pid -o comm= )
    [ "x$runuser_Xephyr_name" = "xrunuser" ] && kill $runuser_Xephyr_pid \
            || die "Cannot stop Xephyr"
fi

#fusermount -u "$realhome/nspawn/$machine_name"
